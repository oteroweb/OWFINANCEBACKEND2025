name: Deploy OWFINANCE dentro de public_html

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'           # AJUSTA si tu app requiere otra versión
          extensions: mbstring, intl, pdo_mysql, bcmath, gd, zip, curl, xml
          coverage: none

      - name: Copy example env for build (no secrets)
        run: cp .env.example .env

      - name: Composer install (build vendor en CI)
        env:
          COMPOSER_PROCESS_TIMEOUT: 0
          COMPOSER_NO_INTERACTION: 1
          COMPOSER_NO_AUDIT: 1
        run: composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader

      # Si necesitas assets (Vite), descomenta:
      # - name: Setup Node
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: '20'
      # - name: Build assets
      #   run: |
      #     npm ci
      #     npm run build

      - name: Preparar bundle para subir
        run: |
          mkdir -p __upload__
          rsync -a --delete \
            --exclude ".git" --exclude ".github" \
            --exclude "__upload__" \
            --exclude "node_modules" \
            ./ __upload__/

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Add known_hosts
        run: ssh-keyscan -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Crear carpeta temporal de subida en public_html
        run: |
          ssh -p "${{ secrets.SSH_PORT }}" \
            "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" \
            "mkdir -p '${{ secrets.PUBLIC_HTML }}/app_upload'"

      - name: Subir bundle a public_html/app_upload
        run: |
          rsync -az --delete \
            -e "ssh -p ${{ secrets.SSH_PORT }}" \
            ./__upload__/ \
            "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.PUBLIC_HTML }}/app_upload/"

      - name: Instalar/actualizar app en public_html (sin salir de ahí)
        run: |
          ssh -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" "bash -lc '
            set -euo pipefail
            APP_DIR=\"${{ secrets.PUBLIC_HTML }}/app\"
            UPLOAD_DIR=\"${{ secrets.PUBLIC_HTML }}/app_upload\"

            # 1) Preservar .env si ya existía
            if [ -f \"$APP_DIR/.env\" ]; then
              cp \"$APP_DIR/.env\" \"$UPLOAD_DIR/.env\"
            fi

            # 2) Swap atómico: reemplazar app por lo subido
            rm -rf \"$APP_DIR.bak\" || true
            if [ -d \"$APP_DIR\" ]; then mv \"$APP_DIR\" \"$APP_DIR.bak\"; fi
            mv \"$UPLOAD_DIR\" \"$APP_DIR\"

            # 3) Permisos mínimos para cache
            chmod -R ug+rwX \"$APP_DIR/storage\" \"$APP_DIR/bootstrap/cache\" || true

            # 4) Comandos artisan (usando vendor subido desde CI)
            cd \"$APP_DIR\"
            php artisan key:generate --force || true
            php artisan config:cache
            php artisan route:cache || true
            php artisan view:cache || true
            php artisan migrate --force || true

            # 5) storage:link con fallback si no permiten symlinks
            if ! php artisan storage:link; then
              echo \"Symlink no permitido; copiando archivos públicos de storage...\"
              rm -rf \"$APP_DIR/public/storage\"
              mkdir -p \"$APP_DIR/public/storage\"
              rsync -a \"$APP_DIR/storage/app/public/\" \"$APP_DIR/public/storage/\"
            fi

            # 6) Publicar contenido de public/ en la raiz de public_html
            rsync -a --delete \"$APP_DIR/public/\" \"${{ secrets.PUBLIC_HTML }}/\"

            # 7) Proteger carpeta app/ de accesos web (Apache 2.4 y 2.2)
            cat > \"$APP_DIR/.htaccess\" <<\"HTX\"
<IfModule mod_authz_core.c>
  Require all denied
</IfModule>
<IfModule !mod_authz_core.c>
  Deny from all
</IfModule>
HTX

            # 8) Limpieza
            rm -rf \"$APP_DIR.bak\" || true

            echo \"Deploy OK en ${${{ secrets.PUBLIC_HTML }}#/home/}\"
          '"
