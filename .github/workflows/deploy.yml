name: Deploy OWFINANCE dentro de public_html

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'  # ajusta si tu proyecto requiere otra
          extensions: mbstring, intl, pdo_mysql, bcmath, gd, zip, curl, xml
          coverage: none

      - name: Copiar .env.example local (solo para build)
        run: cp .env.example .env

      - name: Instalar dependencias (Composer en CI)
        env:
          COMPOSER_PROCESS_TIMEOUT: 0
          COMPOSER_NO_INTERACTION: 1
          COMPOSER_NO_AUDIT: 1
        run: composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader

      # Si compilas assets con Vite, descomenta:
      # - name: Setup Node
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: '20'
      # - name: Build assets
      #   run: |
      #     npm ci
      #     npm run build

      - name: Preparar bundle a subir
        run: |
          mkdir -p __upload__
          rsync -a --delete \
            --exclude ".git" --exclude ".github" \
            --exclude "__upload__" \
            --exclude "node_modules" \
            ./ __upload__/

      - name: Iniciar SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Añadir known_hosts
        run: ssh-keyscan -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Chequear permisos y directorios
        run: |
          ssh -p "${{ secrets.SSH_PORT }}" \
            "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" \
            "echo 'Directorio actual:'; pwd; 
             echo 'Usuario actual:'; whoami;
             echo 'Verificando directorios disponibles:'; 
             ls -la .; 
             echo 'Verificando estructura de owfinance:';
             if [ -d './owfinance' ]; then ls -la ./owfinance; fi;
             echo 'Verificando directorio public_html:';
             if [ -L 'public_html' ]; then 
               echo 'public_html es un symlink que apunta a:'; 
               readlink -f public_html;
             elif [ -d 'public_html' ]; then
               echo 'public_html es un directorio normal';
             else
               echo 'public_html no existe';
             fi"

      - name: Crear carpeta app_upload en directorio owfinance
        run: |
          ssh -p "${{ secrets.SSH_PORT }}" \
            "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" \
            "mkdir -p './owfinance/app_upload' || echo 'No se pudo crear el directorio, usando directorio temporal';
             if [ ! -d './owfinance/app_upload' ]; then mkdir -p '/tmp/app_upload'; fi"

      - name: Subir bundle a app_upload
        run: |
          ssh -p "${{ secrets.SSH_PORT }}" \
            "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" \
            "if [ -d './owfinance/app_upload' ]; then 
               echo 'Usando owfinance/app_upload'; 
               TARGET_DIR='./owfinance/app_upload'; 
             else 
               echo 'Usando directorio temporal'; 
               TARGET_DIR='/tmp/app_upload'; 
             fi; 
             echo \"TARGET_DIR=$TARGET_DIR\" > /tmp/target_dir.txt"
          
          TARGET_DIR=$(ssh -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" "cat /tmp/target_dir.txt | grep TARGET_DIR | cut -d'=' -f2")
          echo "Uploading to: $TARGET_DIR"
          
          rsync -az --delete \
            -e "ssh -p ${{ secrets.SSH_PORT }}" \
            ./__upload__/ \
            "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:$TARGET_DIR/"

      - name: Instalar/actualizar app en public_html (todo dentro de public_html)
        run: |
          ssh -p "${{ secrets.SSH_PORT }}" \
            "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" \
            "if [ -d '${{ secrets.PUBLIC_HTML }}' ]; then 
               PUBLIC_HTML='${{ secrets.PUBLIC_HTML }}'; 
             else 
               PUBLIC_HTML=\$(pwd); 
             fi; 
             PHP_CLI='php' bash -s" <<'REMOTE'
          set -euo pipefail

          # Vars de entorno inyectadas por SSH:
          PUBLIC_HTML="${PUBLIC_HTML:-$(pwd)}"
          PHP_CLI="${PHP_CLI:-php}"
          
          echo "Usando PUBLIC_HTML=$PUBLIC_HTML"
          
          # Detectar si estamos usando PUBLIC_HTML o directorio local
          if [ -d "$PUBLIC_HTML/app_upload" ]; then
            APP_DIR="$PUBLIC_HTML/app"
            UPLOAD_DIR="$PUBLIC_HTML/app_upload"
          else
            APP_DIR="./app"
            UPLOAD_DIR="./app_upload"
          fi
          
          echo "Usando APP_DIR=$APP_DIR y UPLOAD_DIR=$UPLOAD_DIR"

          # 1) Preservar .env si ya existía
          if [ -f "$APP_DIR/.env" ]; then
            cp "$APP_DIR/.env" "$UPLOAD_DIR/.env"
          fi

          # 2) Swap atómico: app -> app.bak, app_upload -> app
          rm -rf "$APP_DIR.bak" || true
          if [ -d "$APP_DIR" ]; then mv "$APP_DIR" "$APP_DIR.bak"; fi
          mv "$UPLOAD_DIR" "$APP_DIR"

          # 3) Permisos mínimos
          mkdir -p "$APP_DIR/storage" "$APP_DIR/bootstrap/cache"
          chmod -R ug+rwX "$APP_DIR/storage" "$APP_DIR/bootstrap/cache" || true

          # 4) Artisan con vendor traído desde CI
          cd "$APP_DIR"
          $PHP_CLI artisan key:generate --force || true
          $PHP_CLI artisan config:cache
          $PHP_CLI artisan route:cache || true
          $PHP_CLI artisan view:cache || true
          $PHP_CLI artisan migrate --force || true

          # 5) storage:link con fallback si el hosting no permite symlinks
          if ! $PHP_CLI artisan storage:link; then
            echo "Symlink denegado; copiando storage público…"
            rm -rf "$APP_DIR/public/storage"
            mkdir -p "$APP_DIR/public/storage"
            rsync -a "$APP_DIR/storage/app/public/" "$APP_DIR/public/storage/" || true
          fi

          # 6) Publicar la carpeta public/ en la raíz de public_html
          rsync -a --delete "$APP_DIR/public/" "$PUBLIC_HTML/"

          # 7) Proteger app/ de accesos web (Apache 2.4/2.2)
          cat > "$APP_DIR/.htaccess" <<'HTX'
          <IfModule mod_authz_core.c>
            Require all denied
          </IfModule>
          <IfModule !mod_authz_core.c>
            Deny from all
          </IfModule>
          HTX

          # 8) Limpieza de backup
          rm -rf "$APP_DIR.bak" || true

          echo "Deploy OK dentro de $PUBLIC_HTML"
          REMOTE

      - name: Verificar archivos publicados
        run: |
          ssh -p "${{ secrets.SSH_PORT }}" \
            "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" \
            "if [ -d '${{ secrets.PUBLIC_HTML }}' ]; then 
               echo 'Listando archivos en PUBLIC_HTML:';
               ls -la '${{ secrets.PUBLIC_HTML }}' | head -n 50; 
             else 
               echo 'PUBLIC_HTML no existe, listando directorio actual:';
               ls -la . | head -n 50; 
             fi"
